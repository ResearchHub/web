---
description: 
globs: 
alwaysApply: false
---
 # ResearchHub TypeScript Standards

This document outlines the TypeScript standards and conventions used in the ResearchHub codebase.

## Type Definitions

1. **Interfaces vs Types**:
   - Use `interface` for object shapes that may be extended
   - Use `type` for unions, primitives, and complex types that won't be extended
   - Prefer interfaces for public API definitions

   ```typescript
   // Use interface for object shapes that might be extended
   interface UserProfile {
     id: string;
     name: string;
     email: string;
   }

   // Use type for unions and more complex types
   type Status = 'idle' | 'loading' | 'success' | 'error';
   type ButtonVariant = 'primary' | 'secondary' | 'ghost';
   ```

2. **Naming Conventions**:
   - Use PascalCase for type names and interfaces
   - Use descriptive names that indicate the purpose
   - Append `Props` to component prop interfaces
   - Prefix enum names with 'E' (e.g., `EButtonSize`)

3. **Organization**:
   - Place shared types in the `types/` directory
   - Keep component-specific types in the component file
   - Group related types together

## Type Safety

1. **Strict Type Checking**:
   - Enable strict mode in `tsconfig.json`
   - Avoid using `any` type when possible
   - Use specific types instead of generic `object` type

2. **Null and Undefined**:
   - Use optional chaining (`?.`) for potentially undefined properties
   - Use nullish coalescing (`??`) for default values
   - Be explicit about nullable types with union types

   ```typescript
   function getUser(id?: string): User | null {
     if (!id) return null;
     // ...
   }

   // Handling nullable values
   const username = user?.name ?? 'Guest';
   ```

3. **Type Assertions**:
   - Use type assertions (`as Type`) sparingly
   - Prefer type guards to narrow types safely
   - Document why type assertions are necessary when used

4. **Type Guards**:
   - Use type predicates for custom type guards

   ```typescript
   function isUser(obj: any): obj is User {
     return obj && typeof obj === 'object' && 'id' in obj && 'name' in obj;
   }
   ```

## Generic Types

1. **Using Generics**:
   - Use generics to create reusable utility types
   - Use descriptive type parameter names (T, U, etc. are acceptable for simple cases)
   - Constrain generics when possible using extends

   ```typescript
   // Generic function with constraint
   function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {
     return obj[key];
   }
   ```

2. **Common Generic Patterns**:
   - Use `React.FC<Props>` for functional components (optional, as explicit return types are preferred)
   - Use built-in generic types like `Partial<T>`, `Pick<T, K>`, and `Omit<T, K>`

## API Types

1. **Request/Response Types**:
   - Define specific types for API requests and responses
   - Use descriptive names that indicate the purpose
   - Keep related request/response types together

   ```typescript
   interface GetUserRequest {
     userId: string;
   }

   interface GetUserResponse {
     user: User;
     lastLogin: string;
   }
   ```

2. **Data Transformations**:
   - Define transformation functions between API and UI models
   - Document any assumptions or edge cases

## Event Handlers

1. **Event Types**:
   - Use specific event types from React
   - Define clear callback types for custom events

   ```typescript
   // React event handler
   const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
     // ...
   };

   // Custom event handler
   interface TabChangeEvent {
     previousIndex: number;
     newIndex: number;
   }

   type TabChangeHandler = (event: TabChangeEvent) => void;
   ```

## Error Handling

1. **Error Types**:
   - Define custom error types with meaningful properties
   - Use union types to represent different error states

   ```typescript
   type APIError = {
     code: string;
     message: string;
     status: number;
   };

   type LoadingState<T> = 
     | { status: 'idle' }
     | { status: 'loading' }
     | { status: 'success'; data: T }
     | { status: 'error'; error: APIError };
   ```

## Documentation

1. **JSDoc Comments**:
   - Use JSDoc comments for functions, interfaces, and complex types
   - Document parameters, return types, and exceptions
   - Include examples for complex functions

   ```typescript
   /**
    * Fetches a user by ID from the API
    * @param id - The unique identifier of the user
    * @returns A promise that resolves to the user or null if not found
    * @throws {APIError} When the API request fails
    * @example
    * ```
    * const user = await fetchUser('123');
    * ```
    */
   async function fetchUser(id: string): Promise<User | null> {
     // ...
   }
   ```

These TypeScript standards ensure code quality, readability, and maintainability throughout the ResearchHub application.
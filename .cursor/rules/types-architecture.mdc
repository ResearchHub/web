---
description: This document outlines the architectural patterns and best practices for TypeScript types in the ResearchHub codebase.
globs: 
alwaysApply: false
---
 # ResearchHub Types Architecture

This document outlines the architectural patterns and best practices for TypeScript types in the ResearchHub codebase.

## Type Organization

1. **Domain-specific Files**:
   - Organize types by domain in dedicated files (e.g., `feed.ts`, `note.ts`)
   - Group related interfaces, types, and enums together
   - Export all types needed by consumers

   ```typescript
   // feed.ts
   export interface FeedEntry { /* ... */ }
   export type FeedActionType = 'upvote' | 'comment' | 'create';
   export enum ContentType { /* ... */ }
   ```

2. **Naming Conventions**:
   - Use PascalCase for interfaces, types, and enums
   - Use descriptive names that convey purpose and structure
   - Add appropriate suffixes to indicate usage (e.g., `Response`, `Params`)

   ```typescript
   // Good naming examples
   export interface NoteApiResponse { /* ... */ }
   export type ContentType = 'paper' | 'post' | 'bounty';
   export enum FundingRequestStatus { /* ... */ }
   ```

## Interface Structure

1. **API Response Interfaces**:
   - Define interfaces for all API responses
   - Include API-specific naming (e.g., snake_case properties)
   - Use the `ApiResponse` suffix for clarity

   ```typescript
   export interface NoteApiResponse {
     id: string;
     title: string;
     content: string;
     created_by: string;
     created_at: string;
     updated_at: string;
     // Other API properties
   }
   ```

2. **Application Model Interfaces**:
   - Create client-side model interfaces with camelCase properties
   - Include all properties needed by UI components
   - Add optional properties for partial data scenarios

   ```typescript
   export interface Note {
     id: string;
     title: string;
     content: string;
     createdBy: string;
     createdAt: Date;
     updatedAt: Date;
     isEditable?: boolean;
     // Other client-side properties
   }
   ```

3. **Extension Patterns**:
   - Use interface extension to build upon base interfaces
   - Create specialized interfaces for specific use cases
   - Avoid deep inheritance hierarchies (prefer composition)

   ```typescript
   export interface BaseNote {
     id: string;
     title: string;
   }
   
   export interface NoteWithContent extends BaseNote {
     content: string;
     collaborators: User[];
   }
   
   export interface NoteListItem extends BaseNote {
     excerpt: string;
     updatedAt: Date;
   }
   ```

## Type Definitions

1. **Union Types**:
   - Use union types for values with a finite set of options
   - Define clear, specific union types for related values
   - Add documentation for non-obvious union types

   ```typescript
   // Simple union of string literals
   export type ContentType = 'paper' | 'post' | 'bounty' | 'funding_request';
   
   // Union of interfaces
   export type Content = Paper | Post | Bounty | FundingRequest;
   ```

2. **Enums**:
   - Use enums for fixed sets of related values
   - Prefer string enums for better debugging and serialization
   - Document enum values with JSDoc comments

   ```typescript
   /**
    * Status of a funding request
    */
   export enum FundingRequestStatus {
     DRAFT = 'draft',
     SUBMITTED = 'submitted',
     APPROVED = 'approved',
     REJECTED = 'rejected',
     FUNDED = 'funded',
     COMPLETED = 'completed',
   }
   ```

3. **Literal Types**:
   - Use literal types for specific, known values
   - Combine literals into union types for better type checking
   - Use const assertions for object literals when appropriate

   ```typescript
   // Literal type with union
   type ButtonSize = 'sm' | 'md' | 'lg' | 'xl';
   
   // Const assertion for object literal
   const ROUTES = {
     HOME: '/',
     FEED: '/feed',
     PROFILE: '/profile',
   } as const;
   
   type Route = typeof ROUTES[keyof typeof ROUTES];
   ```

## Type Transformations

1. **Transformer Pattern**:
   - Use transformer functions to convert between API and client models
   - Maintain consistent transformation patterns across the application
   - Preserve raw data for debugging when needed

   ```typescript
   // Using the transformer utility
   import { createTransformer } from '../types/transformer';
   
   export const transformNote = createTransformer<NoteApiResponse, Note>((data) => ({
     id: data.id,
     title: data.title,
     content: data.content,
     createdBy: data.created_by,
     createdAt: new Date(data.created_at),
     updatedAt: new Date(data.updated_at),
     // Transform other properties
   }));
   ```

2. **Partial Types**:
   - Use `Partial<Type>` for optional update operations
   - Define specific input types for partial updates
   - Document which fields are required vs. optional

   ```typescript
   export interface UpdateNoteParams {
     id: string; // Required
     title?: string; // Optional update fields
     content?: string;
     collaborators?: string[];
   }
   
   // Or using utility types
   export type UpdateNoteParams = {
     id: string; // Required
   } & Partial<Pick<Note, 'title' | 'content' | 'collaborators'>>;
   ```

## Type Utilities

1. **Pick and Omit**:
   - Use `Pick` to create a type with a subset of properties
   - Use `Omit` to create a type without specific properties
   - Combine utility types for complex type transformations

   ```typescript
   // Creating a type with only specific properties
   type NotePreview = Pick<Note, 'id' | 'title' | 'excerpt' | 'updatedAt'>;
   
   // Creating a type without specific properties
   type NoteForCreation = Omit<Note, 'id' | 'createdAt' | 'updatedAt'>;
   ```

2. **Type Guards**:
   - Implement type guards to narrow types
   - Use descriptive function names for type guards
   - Return type predicates for better type inference

   ```typescript
   // Type guard for Content union type
   export function isPaper(content: Content): content is Paper {
     return content.type === 'paper';
   }
   
   // Usage example
   if (isPaper(content)) {
     // Content is now narrowed to Paper type
     console.log(content.doi); // TypeScript knows this property exists
   }
   ```

## Documentation

1. **JSDoc Comments**:
   - Document complex types with JSDoc comments
   - Include descriptions for non-obvious properties
   - Add examples for complex or unusual types

   ```typescript
   /**
    * Represents a feed entry in the application
    * @property id - Unique identifier for the entry
    * @property content - The content object (Paper, Post, etc.)
    * @property contentType - The type of content
    * @property actions - List of actions performed on this content
    */
   export interface FeedEntry {
     id: string;
     content: Content;
     contentType: ContentType;
     actions: FeedAction[];
     // Other properties
   }
   ```

2. **Inline Comments**:
   - Add inline comments for complex type expressions
   - Document the purpose of utility type transformations
   - Explain non-obvious type constraints

   ```typescript
   // Maps API response fields to client model fields
   type UserModelMapping = {
     [K in keyof UserApiResponse as CamelCase<K>]: UserApiResponse[K];
   };
   
   // Creates a discriminated union based on content type
   type ContentByType = {
     [K in ContentType]: { type: K } & ContentTypeMapping[K];
   }[ContentType];
   ```

## Type Safety

1. **Strict Type Checking**:
   - Enable strict mode in TypeScript configuration
   - Avoid use of `any` type
   - Use `unknown` instead of `any` for values of uncertain type

   ```typescript
   // Avoid this
   function processData(data: any): any {
     return data.value;
   }
   
   // Prefer this
   function processData(data: unknown): number {
     if (typeof data === 'object' && data !== null && 'value' in data) {
       return typeof data.value === 'number' ? data.value : 0;
     }
     return 0;
   }
   ```

2. **Nullability**:
   - Use optional properties (`?`) instead of union with `null`
   - Handle null and undefined values consistently
   - Use non-null assertion (`!`) sparingly and only when certain

   ```typescript
   // Prefer optional properties
   interface User {
     id: string;
     name: string;
     bio?: string; // Better than bio: string | null
   }
   
   // Handle nullability carefully
   function getUserName(user?: User): string {
     return user?.name ?? 'Unknown User';
   }
   ```

These patterns ensure consistent, maintainable, and type-safe code throughout the ResearchHub application.